📱 핵심 목표

Gemini 스타일 전체 화면 채팅 + Nothing™ 시각적 개선 (복잡한 애니메이션 제외)
🎯 구현 우선순위
Phase 1: 레이아웃 재구성 (필수)

typescript
// 1. 전체 화면 채팅 컨테이너
const FullScreenChat: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  
  return (
    <div className="flex flex-col h-screen bg-gradient-to-b from-slate-900 to-slate-800">
      <MinimalHeader />
      <div className="flex-1 overflow-y-auto">
        {messages.length === 0 ? <EmptyState /> : <MessageList messages={messages} />}
      </div>
      <ChatInput onSendMessage={handleSendMessage} />
    </div>
  );
};

Phase 2: Nothing™ 색상 시스템 (핵심)

css
:root {
  /* 간소화된 색상 팔레트 */
  --bg-primary: #0f0f23;      /* 메인 배경 */
  --bg-card: #1a1a3e;        /* 카드 배경 */
  --accent-purple: #8b5cf6;   /* 액센트 색상 */
  --text-primary: #ffffff;
  --text-secondary: #9ca3af;
  --border-subtle: rgba(139, 92, 246, 0.2);
}

/* 간단한 그라데이션 텍스트 */
.gradient-text {
  background: linear-gradient(135deg, #8b5cf6, #3b82f6);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

Phase 3: 핵심 컴포넌트 (간소화)
미니멀 헤더 (44px)

typescript
const MinimalHeader: React.FC = () => (
  <div className="flex items-center justify-between px-4 py-3 bg-slate-900/80 backdrop-blur-sm border-b border-purple-500/10">
    <div className="flex items-center space-x-3">
      <div className="w-10 h-10 rounded-full bg-gradient-to-br from-purple-500 to-blue-500 flex items-center justify-center">
        <Bot className="w-5 h-5 text-white" />
      </div>
      <div>
        <h1 className="text-white font-semibold text-lg">AI 학습 도우미</h1>
        <p className="text-purple-400 text-xs">온라인</p>
      </div>
    </div>
  </div>
);

간단한 빈 상태 화면

typescript
const EmptyState: React.FC = () => (
  <div className="flex flex-col items-center justify-center h-full px-6">
    <div className="w-20 h-20 rounded-full bg-gradient-to-br from-purple-500 to-blue-500 flex items-center justify-center mb-6">
      <GraduationCap className="w-10 h-10 text-white" />
    </div>
    
    <h2 className="text-2xl font-bold mb-4 text-center">
      <span className="text-white">AI 학습</span>
      <span className="gradient-text"> 도우미</span>
    </h2>
    
    <p className="text-gray-400 text-center mb-8 max-w-sm">
      궁금한 것이 있으면 언제든 물어보세요!
    </p>
    
    {/* 간단한 시작 버튼만 */}
    <button 
      onClick={() => onQuickStart("안녕하세요!")}
      className="px-6 py-3 bg-purple-500 text-white rounded-2xl hover:bg-purple-600 transition-colors"
    >
      대화 시작하기
    </button>
  </div>
);

기본 메시지 버블

typescript
const MessageBubble: React.FC<{ message: Message }> = ({ message }) => (
  <div className={`flex ${message.type === 'ai' ? 'justify-start' : 'justify-end'} mb-4`}>
    <div className={`max-w-[85%] p-4 rounded-2xl ${
      message.type === 'ai' 
        ? 'bg-slate-800 border border-purple-500/20 text-white' 
        : 'bg-purple-500 text-white'
    }`}>
      <p className="leading-relaxed">{message.content}</p>
      <div className="mt-2 text-xs opacity-70">
        {new Date(message.timestamp).toLocaleTimeString('ko-KR', {
          hour: '2-digit', minute: '2-digit'
        })}
      </div>
    </div>
  </div>
);

간소화된 입력창

typescript
const ChatInput: React.FC<{ onSendMessage: (msg: string) => void }> = ({ onSendMessage }) => {
  const [message, setMessage] = useState('');
  const [showFileInput, setShowFileInput] = useState(false);
  
  return (
    <div className="p-4 bg-slate-900/95 backdrop-blur-sm border-t border-purple-500/20">
      {/* 파일 입력 (토글 방식, 드래그앤드롭 제외) */}
      {showFileInput && (
        <div className="mb-3 p-3 bg-slate-800 rounded-xl">
          <input type="file" multiple className="w-full text-white" />
        </div>
      )}
      
      <div className="flex items-end space-x-3">
        {/* 파일 버튼 */}
        <button
          onClick={() => setShowFileInput(!showFileInput)}
          className="p-3 bg-slate-800 text-purple-400 rounded-full hover:bg-purple-500/20 transition-colors min-w-[48px] min-h-[48px]"
        >
          <Plus className="w-5 h-5" />
        </button>
        
        {/* 텍스트 입력 */}
        <div className="flex-1 relative">
          <input
            type="text"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            onKeyDown={(e) => e.key === 'Enter' && handleSend()}
            placeholder="메시지를 입력하세요..."
            className="w-full bg-slate-800 border border-purple-500/30 rounded-2xl px-4 py-3 pr-12 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 text-base"
          />
          
          <button
            onClick={() => handleSend()}
            disabled={!message.trim()}
            className={`absolute right-2 top-1/2 -translate-y-1/2 p-2 rounded-xl transition-colors ${
              message.trim() 
                ? 'bg-purple-500 hover:bg-purple-600 text-white' 
                : 'bg-gray-700 text-gray-500'
            }`}
          >
            <Send className="w-5 h-5" />
          </button>
        </div>
      </div>
    </div>
  );
  
  const handleSend = () => {
    if (message.trim()) {
      onSendMessage(message);
      setMessage('');
    }
  };
};

✅ 간소화된 체크리스트
필수 구현 (Phase 1)

    FullScreenChat 컨테이너 (h-screen 활용)

    MinimalHeader (44px 고정)

    MessageList 컴포넌트

    ChatInput 기본 기능

    Nothing™ 색상 적용

중요 구현 (Phase 2)

    빈 상태 화면

    파일 업로드 (토글 방식)

    메시지 자동 스크롤

    로딩 상태 표시

    모바일 터치 최적화 (44px 타겟)

선택 구현 (Phase 3)

    타임스탬프 표시

    키보드 대응 개선

    기본 에러 처리
